//
// before most of the sass restructure
//
//
/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

// variables
$color-primary: #7ed56f;
$color-primary-light: #55c57a;
$color-primary-dark: #28b485;
$color-grey-dark: #777;
$color-white: #fff;
$color-black: #000;

*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  /* best practice for box sizing */
  box-sizing: inherit;
}

/* 
root font size is declared in html 
can be used for rem calculations
*/
html {
  /* 
  use 10px to make life easier
  one rem is === 10px --> easy math
  */

  /* bad practice to make it based on pixels though... */
  /* font-size: 10px; */
  /* 10 / 16(16px default browser) = 62.5 */
  font-size: 62.5%;
}

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  /* font-size: 16px; */
  line-height: 1.7;
  color: $color-grey-dark;
  /* example -> convert 30px padding to rem
  30 / 10(the root font-size) = 3rem */
  /* padding: 30px; */
  padding: 3rem;

  box-sizing: border-box;
  
}

.header {
  height: 95vh;
  background-image: linear-gradient(
    to right bottom, 
    rgba($color-primary-light, 0.8), 
    rgba($color-primary-dark, 0.8)), 
    url(../img/hero.jpg);
  background-size: cover;
  background-position: top;
  position: relative;

  /* clip-path: polygon(x y, x y, x y, x y); */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
}

.header__logo-box {
  position: absolute;
  /* top: 40px;
  left: 40px; */
  top: 4rem;
  left: 4rem;
}

.header__logo {
  /* height: 35px; */
  height: 3.5rem;
}

/* good reference for centering */
.header__text-box {
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
  text-align: center;
}

.heading-primary {
  color: $color-white;
  text-transform: uppercase;

  /* fix: stops shakey animations */
  /* though mine wasn't shaking anyway */
  backface-visibility: hidden;
  /* margin-bottom: 60px; */
  margin-bottom: 6rem;
}

.heading-primary--main {
  display: block;
  /* font-size: 60px; */
  font-size: 6rem;
  font-weight: 400;
  /* letter-spacing: 35px; */
  letter-spacing: 3.5rem;

  /* animation properties */
  animation-name: moveInLeft;
  animation-duration: 1s;
  animation-timing-function: ease-out;

  /* 
  animation-delay: 3s;
  animation-iteration-count: 3;
  */
}

.heading-primary--sub {
  display: block;
  /* font-size: 20px; */
  font-size: 2rem;
  font-weight: 700;
  /* letter-spacing: 17.4px; */
  letter-spacing: 1.75rem;

  /* animation property short-hand notation */
  animation: moveInRight 1s ease-out;
}

/* animations */
@keyframes moveInLeft {
  /* start --> how it looks at the start */
  0% {
    opacity: 0;
    /* transform: translateX(-100px); */
    transform: translateX(-10rem);
  }

  /* middle steps */
  /* this adds the 'bounce' effect */
  80% {
    /* transform: translateX(10px); */
    transform: translateX(1rem);
  }

  /* finish --> how it looks at the finish */ 
  100% {
    opacity: 1;
    transform: translate(0);
  }
}

/* animations */
@keyframes moveInRight {
  /* start --> how it looks at the start */
  0% {
    opacity: 0;
    /* transform: translateX(100px); */
    transform: translateX(1rem);
  }

  /* middle steps */
  /* this adds the 'bounce' effect */
  80% {
    /* transform: translateX(-10px); */
    transform: translateX(-1rem);
  }

  /* finish --> how it looks at the finish */ 
  100% {
    opacity: 1;
    transform: translate(0);
  }
}

@keyframes moveInBottom {
  /* start --> how it looks at the start */
  0% {
    opacity: 0;
    /* transform: translateY(30px); */
    transform: translateY(3rem);
  }

  /* finish --> how it looks at the finish */ 
  100% {
    opacity: 1;
    transform: translate(0);
  }
}

/* 
:link is a pseudo class (special state of a selector)
:link is a state of the btn selector in this case.

:visited is a state when the user has clicked on the btn
before and sees the btn again
*/
.btn:link,
.btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  /* padding: 15px 40px; */
  padding: 1.5rem 4rem;
  display: inline-block;
  /* border-radius: 100px; */
  border-radius: 10rem;

  /* 
  easier way to specify animations 
  short-hand version of @keyframes

  the transition property must be on the
  "initial state" and then specify how it
  should look on the active and hover states
  for example.
  */
  transition: all .2s;
  /* for the .btn::after stuff */
  position: relative;
  font-size: 1.6rem;
}

.btn:hover {
  transform: translateY(-3px);
  /* box-shadow: x y blur rgba(); */
  /* box-shadow: 0 10px 20px rgba(0,0,0,.2); */
  box-shadow: 0 1rem 2rem rgba($color-black, .2);
}

/* :active is when clicked */
.btn:active {
  transform: translateY(-1px);
  /* box-shadow: 0 5px 10px rgba(0,0,0,.2); */
  box-shadow: 0 .5rem 1rem rgba($color-black, .2);
}

.btn--white {
  background-color: $color-white;
  color: $color-grey-dark;
}

/* 
::after pseudo element 
behaves like a child of the btn element
*/
.btn::after {
  /* have to specify content prop for it to appear */
  /* have to specify display prop for it to appear */
  content: "";
  display: inline-block;
  height: 100%;
  width: 100%;
  /* border-radius: 100px; */
  border-radius: 10rem;

  /* have to set the position property of the .btn
  element to relative for this absolute pos to work
  properly */
  position: absolute;
  top: 0;
  left: 0;
  /* to make .btn::after go behind the original .btn */
  z-index: -1;
  transition: all .4s;
}

.btn--white::after {
  background-color: $color-white;
}

/* styles that will happen after user leaves the hover state
of the .btn */
.btn:hover::after {
  transform: scale(1.4) scale(1.6);
  opacity: 0;
}

.btn--animated {
  /* the .75s is for the delay */
  animation: moveInBottom .5s ease-out .75s;
  /* automatically apply the styles of the 0% before
  the animation starts */
  animation-fill-mode: backwards;
}